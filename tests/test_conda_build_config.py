"""Test that conda output type also generates conda_build_config.yaml."""
import tempfile
from pathlib import Path

import yaml

from rapids_dependency_file_generator._config import Output, load_config_from_file
from rapids_dependency_file_generator._rapids_dependency_file_generator import (
    make_dependency_files,
)


def test_conda_build_config_output():
    """Test that conda output type also generates conda_build_config.yaml files."""
    # Create a temporary directory for the test
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)

        # Create a test dependencies.yaml file
        test_config = {
            "files": {
                "build": {
                    "output": ["conda"],
                    "conda_dir": "output",
                    "matrix": {
                        "cuda": ["11.5", "11.6"],
                        "arch": ["x86_64", "arm64"],
                        "py": ["3.8", "3.9"]
                    },
                    "includes": ["build"]
                }
            },
            "channels": ["rapidsai", "conda-forge"],
            "dependencies": {
                "build": {
                    "common": [
                        {
                            "output_types": ["conda"],
                            "packages": ["clang-tools=11.1.0"]
                        }
                    ]
                }
            }
        }

        config_file = temp_path / "dependencies.yaml"
        with open(config_file, "w") as f:
            yaml.dump(test_config, f)

        # Load the config
        parsed_config = load_config_from_file(config_file)

        # Generate the conda files (including conda_build_config.yaml)
        make_dependency_files(
            parsed_config=parsed_config,
            file_keys=["build"],
            output={Output.CONDA},
            matrix=None,
            prepend_channels=[],
            to_stdout=False,
        )

        # Check that the file was created
        output_file = temp_path / "output" / "conda_build_config.yaml"
        assert output_file.exists()

        # Read and verify the contents
        with open(output_file) as f:
            content = f.read()

        # Check that the header is present
        assert "# This file is generated by `rapids-dependency-file-generator`" in content
        assert "# This file contains matrix values aggregated from dependencies.yaml" in content

        # Parse the YAML content
        with open(output_file) as f:
            parsed_content = yaml.safe_load(f)

        # Verify the matrix values are correct
        assert parsed_content["cuda"] == ["11.5", "11.6"]
        assert parsed_content["arch"] == ["x86_64", "arm64"]
        assert parsed_content["python"] == ["3.8", "3.9"]


def test_conda_build_config_with_custom_matrix():
    """Test that conda_build_config.yaml works with custom matrix values."""
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)

        # Create a test dependencies.yaml file
        test_config = {
            "files": {
                "build": {
                    "output": ["conda"],
                    "conda_dir": "output",
                    "matrix": {
                        "cuda": ["11.5", "11.6", "11.7"],
                        "arch": ["x86_64"]
                    },
                    "includes": ["build"]
                }
            },
            "channels": ["rapidsai"],
            "dependencies": {
                "build": {
                    "common": [
                        {
                            "output_types": ["conda"],
                            "packages": ["clang-tools=11.1.0"]
                        }
                    ]
                }
            }
        }

        config_file = temp_path / "dependencies.yaml"
        with open(config_file, "w") as f:
            yaml.dump(test_config, f)

        # Load the config
        parsed_config = load_config_from_file(config_file)

        # Generate with a custom matrix
        custom_matrix = {
            "cuda": ["11.8"],
            "arch": ["arm64"]
        }

        make_dependency_files(
            parsed_config=parsed_config,
            file_keys=["build"],
            output={Output.CONDA},
            matrix=custom_matrix,
            prepend_channels=[],
            to_stdout=False,
        )

        # Check that the file was created
        output_file = temp_path / "output" / "conda_build_config.yaml"
        assert output_file.exists()

        # Parse the YAML content
        with open(output_file) as f:
            parsed_content = yaml.safe_load(f)

        # Verify the custom matrix values are used
        assert parsed_content["cuda"] == ["11.8"]
        assert parsed_content["arch"] == ["arm64"]


def test_conda_build_config_stdout():
    """Test that conda_build_config output works with stdout."""
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)

        # Create a test dependencies.yaml file
        test_config = {
            "files": {
                "build": {
                    "output": ["conda"],
                    "conda_dir": "output",
                    "matrix": {
                        "cuda": ["11.5"],
                        "arch": ["x86_64"]
                    },
                    "includes": ["build"]
                }
            },
            "channels": ["rapidsai"],
            "dependencies": {
                "build": {
                    "common": [
                        {
                            "output_types": ["conda"],
                            "packages": ["clang-tools=11.1.0"]
                        }
                    ]
                }
            }
        }

        config_file = temp_path / "dependencies.yaml"
        with open(config_file, "w") as f:
            yaml.dump(test_config, f)

        # Load the config
        parsed_config = load_config_from_file(config_file)

        # Capture stdout output
        import io
        import sys

        captured_output = io.StringIO()
        original_stdout = sys.stdout
        sys.stdout = captured_output

        try:
            make_dependency_files(
                parsed_config=parsed_config,
                file_keys=["build"],
                output={Output.CONDA},
                matrix=None,
                prepend_channels=[],
                to_stdout=True,
            )
        finally:
            sys.stdout = original_stdout

        output = captured_output.getvalue()

        # Check that the output contains the expected content (conda environment file)
        assert "# This file is generated by `rapids-dependency-file-generator`" in output
        assert "channels:" in output
        assert "dependencies:" in output
        assert "clang-tools=11.1.0" in output
